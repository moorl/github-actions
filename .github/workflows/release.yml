name: Store Release
on:
  workflow_call:
    inputs:
      extensionName:
        required: true
        type: string
      publishShopwareStore:
        required: false
        type: string
        default: 'false'
      cliVersion:
        description: 'The shopware-cli version to build the extension with'
        required: false
        type: string
        default: 'latest'
      path:
        description: "Path to your bundle"
        required: false
        type: string
        default: "."
      environment:
        description: "The environment to use"
        required: false
        type: string
        default: ""

    secrets:
      accountUser:
        required: false
      accountPassword:
        required: false
      ghToken:
        required: true

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.ver.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get current and previous version
        id: versions
        shell: bash
        run: |
          # extract current version from composer.json
          CURR_VERSION=$(jq -r '.version // empty' composer.json)
          if [ -z "$CURR_VERSION" ] || [ "$CURR_VERSION" = "null" ]; then
            echo "composer.json has no .version field – aborting."
            exit 1
          fi
          
          # get previous version from previous commit if composer.json existed there
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            if git show HEAD~1:composer.json >/dev/null 2>&1; then
              PREV_VERSION=$(git show HEAD~1:composer.json | jq -r '.version // empty')
            else
              PREV_VERSION=""
            fi
          else
            PREV_VERSION=""
          fi
          
          echo "curr=$CURR_VERSION" >> "$GITHUB_OUTPUT"
          echo "prev=$PREV_VERSION" >> "$GITHUB_OUTPUT"

      - name: Continue only if version changed
        if: steps.versions.outputs.curr != steps.versions.outputs.prev
        run: |
          echo "Version changed: ${{ steps.versions.outputs.prev }} -> ${{ steps.versions.outputs.curr }}"

  BuildAndRelease:
    needs: check_version
    if: needs.check_version.outputs.curr != needs.check_version.outputs.prev
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install shopware-cli
        uses: shopware/shopware-cli-action@v1
        with:
          version: ${{ inputs.cliVersion }}

      # Version früh ermitteln und für spätere Schritte verfügbar machen
      - name: Get version
        run: |
          set -euo pipefail
          ver="$(shopware-cli extension get-version '${{ inputs.path }}')"
          {
            echo "EXTENSION_VERSION=$ver"
            echo "ZIP_NAME=${{ inputs.extensionName }}-$ver.zip"
          } >> "$GITHUB_ENV"

      - name: Build & create zip
        env:
          NODE_OPTIONS: --openssl-legacy-provider
        run: |
          # shopware-cli erzeugt <name>-<sha>.zip im aktuellen Verzeichnis
          shopware-cli extension zip --git-commit ${{ github.sha }} "${{ inputs.path }}" --release
          mv "${{ inputs.extensionName }}-${{ github.sha }}.zip" "${ZIP_NAME}"
          echo "Built ${ZIP_NAME}"

      - name: Upload Artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.extensionName }}-${{ env.EXTENSION_VERSION }}
          path: ${{ env.ZIP_NAME }}

      - name: Check Tag existence
        uses: mukunku/tag-exists-action@v1.6.0
        id: checkTag
        with:
          tag: ${{ env.EXTENSION_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.ghToken }}

      - name: Validate Zip
        run: shopware-cli extension validate "$(pwd)/${ZIP_NAME}"

      - name: Store Upload
        if: ${{ env.PUBLISH_SHOPWARE_STORE == 'true' }}
        run: shopware-cli account producer extension upload "$(pwd)/${ZIP_NAME}"
        env:
          GITHUB_TOKEN: ${{ secrets.ghToken }}
          SHOPWARE_CLI_ACCOUNT_EMAIL: ${{ secrets.accountUser }}
          SHOPWARE_CLI_ACCOUNT_PASSWORD: ${{ secrets.accountPassword }}
          PUBLISH_SHOPWARE_STORE: ${{ inputs.publishShopwareStore == 'true' && secrets.accountUser != '' && secrets.accountPassword != '' }}

      - name: Extract Changelog
        if: steps.checkTag.outputs.exists != 'true'
        run: shopware-cli extension get-changelog "$(pwd)/${ZIP_NAME}" > /tmp/changelog.txt

      - name: Unzip
        run: |
          unzip -o -q "${ZIP_NAME}" -d /tmp/toDeploy
          mv "${ZIP_NAME}" /tmp/
          rsync -av --exclude '.git' --delete "/tmp/toDeploy/${{ inputs.extensionName }}/" .
          rm -rf ./vendor

      - name: Commit
        if: steps.checkTag.outputs.exists != 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add -f .
          git commit -m "Build release"
          git tag ${EXTENSION_VERSION}
          git push origin ${EXTENSION_VERSION}

      - name: Create a GitHub release
        if: steps.checkTag.outputs.exists != 'true'
        uses: ncipollo/release-action@v1
        with:
          artifacts: /tmp/${{ env.ZIP_NAME }}
          tag: ${{ env.EXTENSION_VERSION }}
          name: ${{ env.EXTENSION_VERSION }}
          bodyFile: /tmp/changelog.txt
